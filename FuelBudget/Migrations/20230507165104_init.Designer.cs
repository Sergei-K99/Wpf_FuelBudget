// <auto-generated />
using System;
using FuelBudget.Model.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FuelBudget.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230507165104_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("FuelBudget.Model.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("FuelBudget.Model.DepartmentButget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("GetAllFactCost")
                        .HasColumnType("REAL");

                    b.Property<double>("GetAllPlanCost")
                        .HasColumnType("REAL");

                    b.Property<int?>("MeasuringPointId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MeasuringPointId");

                    b.ToTable("DepartmentButgets");
                });

            modelBuilder.Entity("FuelBudget.Model.Fuel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Fuels");
                });

            modelBuilder.Entity("FuelBudget.Model.FuelDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DepartmentButgetId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("FuelFactCost")
                        .HasColumnType("REAL");

                    b.Property<int?>("FuelId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("FuelPlanCost")
                        .HasColumnType("REAL");

                    b.Property<double>("VolumeFact")
                        .HasColumnType("REAL");

                    b.Property<double>("VolumePlan")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentButgetId");

                    b.HasIndex("FuelId");

                    b.ToTable("FuelDetails");
                });

            modelBuilder.Entity("FuelBudget.Model.MeasuringPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MeasuringPoints");
                });

            modelBuilder.Entity("FuelBudget.Model.DepartmentButget", b =>
                {
                    b.HasOne("FuelBudget.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("FuelBudget.Model.MeasuringPoint", null)
                        .WithMany("DepartmentButgets")
                        .HasForeignKey("MeasuringPointId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("FuelBudget.Model.FuelDetail", b =>
                {
                    b.HasOne("FuelBudget.Model.DepartmentButget", null)
                        .WithMany("FuelDetails")
                        .HasForeignKey("DepartmentButgetId");

                    b.HasOne("FuelBudget.Model.Fuel", "Fuel")
                        .WithMany()
                        .HasForeignKey("FuelId");

                    b.Navigation("Fuel");
                });

            modelBuilder.Entity("FuelBudget.Model.DepartmentButget", b =>
                {
                    b.Navigation("FuelDetails");
                });

            modelBuilder.Entity("FuelBudget.Model.MeasuringPoint", b =>
                {
                    b.Navigation("DepartmentButgets");
                });
#pragma warning restore 612, 618
        }
    }
}
